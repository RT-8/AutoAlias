!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("AutoAlias",[],e):"object"==typeof exports?exports.AutoAlias=e():t.AutoAlias=e()}(this,(()=>(()=>{"use strict";var t={d:(e,i)=>{for(var o in i)t.o(i,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:i[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{AutoAlias:()=>r,AutoAliasConfiguration:()=>s,AutoAliasTarget:()=>n});const i=require("path"),o=require("fs");class s{constructor(t,e,i,o){this.include=t,this.extensions=e,this.manualAlias=o,this.absoluteTypeScriptConfigurationPath=i}}class n{constructor(t,e){this.absoluteDirectoryPath=t,this.ignoreFiles=null!=e?e:[]}}class r{constructor(t){var e;this.ApplyTSConfigPaths=()=>{let t;try{t=o.readFileSync(this.configuration.absoluteTypeScriptConfigurationPath,{encoding:"utf-8"})}catch(t){console.error(`AutoAlias - Unable to read TypeScript config! \n Provided path : ${this.configuration.absoluteTypeScriptConfigurationPath}`)}t=JSON.parse(t);t.compilerOptions.paths=(t=>{const e={},o=Object.keys(this.aliasObject);for(let s=0;s<o.length;s++){let n=o[s],r=this.aliasObject[n];r=(0,i.relative)(t,r),n=n.replace("$",""),e[n]=[r]}return e})((e=>{const o=t.compilerOptions.baseUrl;if(!o){const t=`AutoAlias - baseUrl is not set in tsconfig.json! \n TSConfig path : ${this.configuration.absoluteTypeScriptConfigurationPath}`;throw console.error(t),t}return(0,i.isAbsolute)(o)?o:(0,i.resolve)((0,i.resolve)(e,".."),o)})(this.configuration.absoluteTypeScriptConfigurationPath));const e=JSON.stringify(t,null," ");o.writeFileSync(this.configuration.absoluteTypeScriptConfigurationPath,e)},this.aliasObject=null!==(e=t.manualAlias)&&void 0!==e?e:{},this.configuration=t;for(const t of this.configuration.include)this.IterateFiles(t.absoluteDirectoryPath,t.ignoreFiles);return this.configuration.absoluteTypeScriptConfigurationPath&&this.ApplyTSConfigPaths(),console.log("[32m","Aliases generated successfully."),console.table(this.aliasObject),this.aliasObject}IterateFiles(t,e){const s=o.readdirSync(t,{withFileTypes:!0});for(const o of s){if(-1!==e.indexOf(o.name))continue;const s=(0,i.resolve)(t,o.name);o.isFile()?this.TryAddAlias(s,o.name,this.configuration.extensions):o.isDirectory()&&this.IterateFiles(s,e)}}TryAddAlias(t,e,i){let s;for(let n=0;n<i.length;n++){let a;if(-1!==(a=e.indexOf(i[n]))){s=e.substring(0,a);const i=o.readFileSync(t,{encoding:"utf-8"}).split(/\r?\n/);for(const e of i){let i;if(-1===(i=e.indexOf(r.autoAliasPrefix)))break;try{const t=e.substring(i+r.autoAliasPrefix.length).split(" ");switch(t[0]){case"-ignore":return;case"-name":s=t[1]}}catch(i){throw console.error(`AutoAlias - Unable to process in-module command! \n Command : ${e} \n Module : ${t}`),i}}this.aliasObject[`@${s}`]=t}}}}return r.autoAliasPrefix="@auto-alias",e})()));